#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#include "zmk-nodefree-config-main/helper.h"
#include "zmk-nodefree-config-main/keypos_def/keypos_36keys.h"             // keyposition helpers
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumb keys

#include "combos.dtsi"

#define BASE 0
#define NUM 1
#define FUNC 2
#define NAV 3
#define MISC 4
#define GAME 5
#define SHORT 6
#define DOTA 7
#define GAMEL2 8

#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 150

/* left-hand HRMs */
ZMK_BEHAVIOR(hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <HM_TAPPING_TERM>;
    quick-tap-ms = <150>;                // repeat on tap-into-hold
    global-quick-tap-ms = <125>;         // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* left-hand Shift HRM */
ZMK_BEHAVIOR(hml_s, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <HM_TAPPING_TERM_FAST>;
    //quick-tap-ms = <125>;                // repeat on tap-into-hold
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
)

/* right-hand HRMs */
ZMK_BEHAVIOR(hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <HM_TAPPING_TERM>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    global-quick-tap-ms = <150>;         // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand Shift HRM */
ZMK_BEHAVIOR(hmr_s, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <HM_TAPPING_TERM_FAST>;
    //quick-tap-ms = <125>;                // repeat on tap-into-hold
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L>;
)

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <150>;
    quick-tap-ms = <125>;
    global-quick-tap;
};

&lt {
    tapping-term-ms = <200>;
    //quick-tap-ms = <125>;
    global-quick-tap;
};


/{
    macros {
        copy_macro: copy_macro {
            label = "copy_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp C>
                , <&macro_release &kp LCTRL>
                ;
        };

        cut_macro: cut_macro {
            label = "cut_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp X>
                , <&macro_release &kp LCTRL>
                ;
        };
        
        paste_macro: paste_macro {
            label = "paste_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp V>
                , <&macro_release &kp LCTRL>
                ;
        };

        altTab_macro: altTab_macro {
            label = "altTab_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp TAB>
                , <&macro_release &kp LALT>
                ;
        };

        ctrlTab_macro: ctrlTab_macro {
            label = "ctrlTab_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp TAB>
                , <&macro_release &kp LCTRL>
                ;
        };

        ctrlShiftTab_macro: ctrlShiftTab_macro {
            label = "ctrlShiftTab_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_press &kp LSHIFT>
                , <&macro_tap &kp TAB>
                , <&macro_release &kp LSHIFT>
                , <&macro_release &kp LCTRL>
                ;
        };
    };
};

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
&kp 1 &kp 2 &kp 3 &kp 4 &kp 5 &kp 6 &kp 7 &kp 8 &kp 9 &kp 0
&kp A &kp B &kp C &kp d &kp e &kp f &kp g &kp h &kp i &kp j
&kp z &kp x &kp y &kp w &kp t &kp 1 &kp 2 &kp 3 &kp 4 &kp 5
 &kp g &kp h &kp i &kp j &kp k &kp l
                        >;
                        label = "HOME";
                };
        };        
};