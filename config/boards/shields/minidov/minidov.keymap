#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#include "zmk-nodefree-config-main/helper.h"
#include "zmk-nodefree-config-main/keypos_def/keypos_36keys.h"             // keyposition helpers
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumb keys

#include "combos.dtsi"

#define BASE 0
#define NUM 1
#define FUNC 2
#define NAV 3
#define MISC 4
#define GAME 5
#define SHORT 6
#define DOTA 7
#define GAMEL2 8

#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 150

/* left-hand HRMs */
ZMK_BEHAVIOR(hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <HM_TAPPING_TERM>;
    quick-tap-ms = <150>;                // repeat on tap-into-hold
    global-quick-tap-ms = <125>;         // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* left-hand Shift HRM */
ZMK_BEHAVIOR(hml_s, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <HM_TAPPING_TERM_FAST>;
    //quick-tap-ms = <125>;                // repeat on tap-into-hold
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
)

/* right-hand HRMs */
ZMK_BEHAVIOR(hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <HM_TAPPING_TERM>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    global-quick-tap-ms = <150>;         // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand Shift HRM */
ZMK_BEHAVIOR(hmr_s, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <HM_TAPPING_TERM_FAST>;
    //quick-tap-ms = <125>;                // repeat on tap-into-hold
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L>;
)

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <150>;
    quick-tap-ms = <125>;
    global-quick-tap;
};

&lt {
    tapping-term-ms = <200>;
    //quick-tap-ms = <125>;
    global-quick-tap;
};


/{
    macros {
        copy_macro: copy_macro {
            label = "copy_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp C>
                , <&macro_release &kp LCTRL>
                ;
        };

        cut_macro: cut_macro {
            label = "cut_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp X>
                , <&macro_release &kp LCTRL>
                ;
        };
        
        paste_macro: paste_macro {
            label = "paste_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp V>
                , <&macro_release &kp LCTRL>
                ;
        };

        altTab_macro: altTab_macro {
            label = "altTab_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp TAB>
                , <&macro_release &kp LALT>
                ;
        };

        ctrlTab_macro: ctrlTab_macro {
            label = "ctrlTab_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp TAB>
                , <&macro_release &kp LCTRL>
                ;
        };

        ctrlShiftTab_macro: ctrlShiftTab_macro {
            label = "ctrlShiftTab_macro";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_press &kp LSHIFT>
                , <&macro_tap &kp TAB>
                , <&macro_release &kp LSHIFT>
                , <&macro_release &kp LCTRL>
                ;
        };
    };
};

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
&hml_s LGUI Q &kp W &kp F &kp P &kp B                              &kp J &kp L &kp U &hmr_s &kp Y &kp BACKSPACE
&lt NAV A &hml_s LALT R &hml_s LCTRL S &hml_s LSHIFT T &kp G          &kp M &hmr_s RSHIFT N &hmr_s RCTRL E &hmr_s LALT I &lt FUNC O
&lt SHORT Z &kp X &kp C &kp D &lt MISC V                             &lt MISC K &kp H &kp COMMA &kp PERIOD &lt NUM SPACE
                        >;
                        label = "HOME";
                };
                
                NUM_layer {
                        bindings = <
&none  &kp N7 &kp N8 &kp N9 &none                    &none &none &none &none &none 
&none  &kp N4 &kp N5 &kp N6 &none                    &none &kp RSHIFT &kp RCTRL &kp RALT &kp RGUI 
&kp N0 &kp N1 &kp N2 &kp N3 &none                    &none &none &none &none &kp SPACE
                        >;
                        label = "NUM";
                };
                
                FUNC_layer {
                        bindings = <
&kp F12 &kp F7 &kp F8 &kp F9 &none         &none &none &none &none &none 
&kp F11 &kp F4 &kp F5 &kp F6 &none         &none &kp RSHIFT &kp RCTRL &kp RALT &kp RGUI 
&kp F10 &kp F1 &kp F2 &kp F3 &none         &none &none &none &none &none 
                        >;
                        label = "Fn";
                };

                NAV_layer {
                        bindings = <
&none &none &none &none &none                           &none &none &none &none &none 
&kp LGUI &kp LALT &kp LCTRL &kp LSHIFT &none            &kp CAPSLOCK &kp LEFT_ARROW &kp DOWN_ARROW &kp UP_ARROW &kp RIGHT_ARROW 
&none &none &none &none &none                           &kp INSERT &kp HOME &kp PAGE_DOWN &kp PAGE_UP &kp END
                        >;
                        label = "NAV";
                };

                MISC_layer {
                        bindings = <
&bt BT_CLR      &bt BT_PRV      &bt BT_NXT      &bt BT_SEL 0    &bootloader       &bootloader   &none &none &none &none
&sys_reset      &out OUT_BLE    &out OUT_USB    &none           &none             &none         &none &none &none &none
&to GAME        &to DOTA        &none           &none           &none             &none         &none &none &none &none 
                >;
                        label = "XXX";
                };

                GAME_LAYER {
                        bindings = <
&kp N2          &kp C   &kp W    &kp R          &lt GAMEL2 G                   &kp ESCAPE &none &none &to BASE &kp RGUI
&kp LSHIFT      &kp A   &kp S    &kp D          &kp F                   &kp T &kp X &kp N7 &kp N8 &kp N9
&kp LCTRL       &kp Z   &kp N3   &kp SPACE      &kp N1                  &kp M &kp N &kp N0 &kp N4 &kp N5
                        >;
                        label = "GAME";
                };

          Shortcut_layer {
                        bindings = <
&none &altTab_macro &ctrlShiftTab_macro &ctrlTab_macro &none             &none &none &none &none &none 
&none &cut_macro &copy_macro &paste_macro &none             &none &none &none &none &none 
&none &none &none &none &none             &none &none &none &none &none 
                        >;
                        label = "SHORT";
                };

        DOTA_LAYER {
                        bindings = <
&kp N1          &kp N2  &kp N3   &kp N4         &kp N5                  &kp ESCAPE &none &none &to BASE &kp RGUI
&kp A           &kp B   &kp C    &kp D          &kp E                   &none &none &none &none &none
&kp N6          &kp N7  &kp N8   &kp N9         &kp N0                  &kp M &none &none &none &none
                        >;
                        label = "DOTA";
                };

            GAME_LAYER_L2 {
                        bindings = <
&kp T &kp X &kp N7 &kp N8 &none                  &none &none &none &none &none
&kp B &kp C &kp E &kp Q &kp I                   &none &none &none &none &none
&kp M &kp N &kp N0 &kp N4 &kp N5                 &none &none &none &none &none
                        >;
                        label = "GAMEL2";
                };

        };        
};